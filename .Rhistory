BestModel_dispers<-sigma(BestModel)
rep(10,BestModel_coef[1,1])
rep(BestModel_coef[1,1],10)
rnorm(1000,
mean = rep(BestModel_coef[1,1],10),  #Recrutamento estimado pelo melhor model
sd = BestModel_coef[1,2]     #Standard error
)
rnbin
rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2])
rnbinom(1000,
mean =   rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2]),
sd = sigma(BestModel)      #Standard error
)
rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2])
rnbinom(1000,
mean =   rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2]),
sd = sigma(BestModel)      #Standard error
)
rnbinom(1000,
mu =   rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2]),
size = sigma(BestModel)      #Standard error
)
rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2])
rnbinom(1000,
mu =   rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2]),
size = sigma(BestModel)      #Standard error
)
Mean_indiv
Mean_indiv$Median[1:2]
BestModel_coef<-(BestModel%>%summary%>%coef)$cond%>%exp()
BestModel_dispers<-sigma(BestModel)
rnorm(1000,
mean = BestModel_coef[1,1],  #Recrutamento estimado pelo melhor model
sd = BestModel_coef[1,2]     #Standard error
)
truncnorm
??truncnorm
rnbinom(1000,
mu =   rnorm(100,BestModel_coef[1,1],BestModel_coef[1,2]),
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)%>%hist()
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel)      #Standard error
)
rec_sim<-0.1+    #A small factor has been added to make sure individuals will not recruit zero indivíduals
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel) #Desviation in the model
)
mean(rec_sim)
mpm_list
mean(mpm_list)
sd(mpm_list)
var(mpm_list)
var2(mpm_list)
sqrt(var2(mpm_list))
mean_vrs<-mean(mpm_list)
sd_vrs<-sqrt(var2(mpm_list))
rec_sim
t
time
ltime
gen
gens
gens=10
mean(mpm_list)
mean_vrs<-mean(mpm_list)^2
mean_vrs
mean_vrs<-mean(lapply(mpm_list, function(x) x^2))
mean_vrs
sd_vrs<-sqrt(lapply(mpm_list, function(x) x^2))
mpm_list, function(x) x^2)
sd_vrs<-sqrt(var2(lapply(mpm_list, function(x) x^2)))
sd_vrs
mean_vrs<-mean(lapply(mpm_list, function(x) x^2))
sd_vrs<-sqrt(var2(lapply(mpm_list, function(x) x^2)))
mean(mpm_list)
mean(mpm_list)^2
mean_vrs<-mean(lapply(mpm_list, function(x) x^2))
sd_vrs<-sqrt(var2(lapply(mpm_list, function(x) x^2)))
sd_vrs
mean_vrs<-mean(lapply(mpm_list, function(x) x^2))
sd_vrs<-sqrt(var2(lapply(mpm_list, function(x) x^2)))
mean(mpm_list)
mean(mpm_list)^2
mean(mpm_list)
mean(mpm_list)^2
mean_vrs
mean(lapply(mpm_list, function(x) x^2))
lapply(mpm_list, function(x) x^2)
mean_vrs
mean_vrs
mean_vrs
mean_vrs[1]
mean_vrs[2]
rbeta
??
popbio
hudvrtypes <- c(rep(1,13), rep(3,5), rep(1,6))
full <- vitalsim(hudvrs$mean, hudvrs$var, hudcorrs$corrin,
hudcorrs$corrout, hudmxdef, vrtypes=hudvrtypes,
n0=c(4264,3,30,16,25,5), yrspan=20 , runs=100)
full
hudvrs
hudvrs$mean
hudvrs$var
hudcorrs$corrin
betaval(mean_vrs[1], mean_vrs[2], fx = runif(1))
mean_vrs[1]
mean_vrs[2]
betaval(mean_vrs[1], mean_vrs[2])
mean_vrs[2]
betaval(mean_vrs[1], sd_vrs[2])
sd_vrs
sd_vrs[2]
betaval(mean_vrs[1], sd_vrs[1])
betaval(mean_vrs[2], sd_vrs[2])
betaval(mean_vrs[1], sd_vrs[1])
betaval(mean_vrs[2], sd_vrs[2])
betaval(mean_vrs[2], sd_vrs[2])
betaval(mean_vrs[2], sd_vrs[2])
betaval(mean_vrs[2], sd_vrs[2])
betaval(mean_vrs[2], sd_vrs[2])
replicate(1000,betaval(mean_vrs[2], sd_vrs[2]))%>%hist()
mean_vrs
replicate(1000,betaval(mean_vrs[2], sd_vrs[2]))%>%hist()
replicate(1000,betaval(mean_vrs[2], sd_vrs[2]))
betaval
??betaval
lapply(mpm_list, function(x) x^2)
lapply(mpm_list, function(x) x^2)%>%unlist()
lapply(mpm_list, function(x) x^2)%>%as.vector()
lapply(mpm_list, function(x) x^2)%>%unlist()
lapply(mpm_list, function(x) x^2)%>%data.frame()
lapply(mpm_list, function(x) x^2)%>%vector()
lapply(mpm_list, function(x) x^2)%>%as.vector()
lapply(mpm_list,as.vector)
do.call(lapply(mpm_list,as.vector),rbind)
do.call(rbind,lapply(mpm_list,as.vector))
do.call(rbind,lapply(mpm_list,as.vector))[,1]
do.call(rbind,lapply(mpm_list,as.vector))[,1]%>%fitdistr(., "beta", start = list(shape1 = 1, shape2 = 1))
do.call(rbind,lapply(mpm_list,as.vector))[,1]%>%MASS::fitdistr(., "beta", start = list(shape1 = 1, shape2 = 1))
do.call(rbind,lapply(mpm_list,as.vector))%>%head()
do.call(rbind,lapply(mpm_list,as.vector))
do.call(rbind,lapply(mpm_list,as.vector))
do.call(rbind,lapply(mpm_list,as.vector))
do.call(rbind,lapply(mpm_list,as.vector))[,1]%>%MASS::fitdistr(., "beta", start = list(shape1 = 1, shape2 = 1))
mean_vrs[1]
mean_vrs[2]
tempMPM<-out<-NULL
MPMtemp<-out<-poptemp<-NULL
mean_vrs
mean_vrs[[1]]
stages<-c("0-1y","1-2y","2-3y","3-4y","4+y")
vr <- list( s0=0.90, s1=0.85, s2=0.85, s3=0.85,s4=0.92,f1=1,f2=1, P=.6, Femea=.5)
post <- expression( matrix2(c(
0, 0,0, s3*f2*P*Femea, s4*f2*P*Femea,
s0, 0, 0, 0, 0,
0,  s1, 0, 0, 0,
0, 0, s2, 0, 0,
0, 0, 0, s3, s4), stages ))
A1 <- eval(post, vr)
lambda(A1)
#estima o tempo de geração com base na matrix A1
generation.time(A1)
image2(elasticity(A1))
#mesma informação mas como outro gráfico
par(mar=c(5,15,4,2))
barplot(subset(as.vector(elasticity(A1)),as.vector(elasticity(A1))>0),horiz=TRUE,xlim=c(0,.6),
names.arg=c("Sobrev. dos recém nascidos","Sobreviv. entre 1-2 anos",
"Sobreviv. entre 2-3 anos","Fecundidade entre 3-4 anos","Sobreviv. entre 3-4 anos",
"Fecundidade aos 4 anos","Sobreviv. quando + de 4 anos"),las=2,
xlab="Importância relativa de cada pâmetro para o crescimento populacional (elasticidade)")
#Gráfico com importância absoluta
#--------------------------------------------------------------
#Nota mental (uso meu no futuro, não se preocupe com isso)
# o uso de "as.vector(elasticity(A1)>0 no subset foi um jeito rápido de pegar apenas os valores da subdiagonal da matriz de sensitividade
#---------------------------------------------------------------------
par(mar=c(5,15,4,2))
barplot(subset(as.vector(sensitivity(A1)),as.vector(elasticity(A1))>0),horiz=TRUE,xlim=c(0,.8),
names.arg=c("Sobrev. dos recém nascidos","Sobreviv. entre 1-2 anos",
"Sobreviv. entre 2-3 anos","Fecundidade entre 3-4 anos","Sobreviv. entre 3-4 anos",
"Fecundidade aos 4 anos","Sobreviv. quando + de 4 anos"),las=2,
xlab="Importância absoluta de cada pâmetro para o crescimento populacional (elasticidade)")
#Simulando mudanças nos parâmetros de sobrevivência
#Figura baseada em Morris & Doak 2002. Figura 7.2
par(mar=c(3,4,4,2))
plot(seq(0.85,1.10,.05)~seq(0.70,0.95,.05),type="n",col="red",
ylab="Taxa de crescimento populacional (Lambda)",
xlab="Valor simulado para cada parâmetro")
abline(h=lambda(A1),lty=2,lwd=4,col="red")
abline(h=1,lty=3,col="gray70")
text(.82,1,"Valor de lambda para que a população permaneça no mesmo tamanho",col="gray70")
text(.82,1.067,"Lambda empírico",col="red")
legend("bottomright",c("s0","s1","s2","s3","s4"),
col=c(1,5,3:4,"orange"),pch=1)
#Simularei quanto  de mudança haverá de diferença no crescimento populacional
# Irei simular mudanças nos parâmetros S0, S1, S2 e S3 e S4
# Que irão variar de 0.70 à 0.95
cenariosSobrevivencia<-seq(0.70,0.95,.001)
#======= SIMULAÇÕES E GRÁFICOS ==================#
cenariosSobrevivencia<-seq(0.70,0.95,.001)
resultado2<-NULL
#Simulações para S0
for(i in 1:length(cenariosSobrevivencia)){
vr2<-vr
vr2$s0<-cenariosSobrevivencia[i]
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col=1)
print(resultado2[i])
}
for(i in 1:length(cenariosSobrevivencia)){
vr2<-vr
vr2$s1<-cenariosSobrevivencia[i]
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col=5)
print(resultado2[i])
}
#Simulações para S2
for(i in 1:length(cenariosSobrevivencia)){
vr2$s2<-cenariosSobrevivencia[i]
vr2<-vr
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col=3)
print(resultado2[i])
}
for(i in 1:length(cenariosSobrevivencia)){
vr2$s3<-cenariosSobrevivencia[i]
vr2<-vr
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col=4)
print(resultado2[i])
}
#Simulações para S4
for(i in 1:length(cenariosSobrevivencia)){
vr2<-vr
vr2$s4<-cenariosSobrevivencia[i]
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col="orange")
print(resultado2[i])
}
mean_vrs[1]
mean_vrs
mean_vrs
sd_vrs[2]
mean_vrs[1]
sd_vrs[1]
mean_vrs[1]
sd_vrs[1]
var2(lapply(mpm_list, function(x) x^2))
var_vrs<-sqrt(var2(lapply(mpm_list, function(x) x^2)))
replicate(1000,betaval(mean_vrs[1],var_vrs[1])
)
replicate(1000,betaval(mean_vrs[1],var_vrs[1])%>%hist()
)
replicate(1000,betaval(mean_vrs[1],var_vrs[1]))%>%hist()
replicate(1000,betaval(mean_vrs[2],var_vrs[2]))%>%hist()
mean_vrs[2]
var_vrs[2]
rec_sim
sample(rec_sim)
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
sample(rec_sim)[1]
vrstoch<-function(){
vr <- list( s0=betaval(mean_vrs[1],var_vrs[1]),
s1=betaval(mean_vrs[2],var_vrs[2]),
f1=sample(rec_sim)[1])
return(vr)
}
(vrstoch))
vrstoch()
vrstoch()
vrstoch()
vrstoch<-function(){
vr <- list( s0=betaval(mean_vrs[1],var_vrs[1]),
s1=betaval(mean_vrs[2],var_vrs[2]),
s1=0,
f1=sample(rec_sim)[1])
return(vr)
}
eval(post, vrstoch())
vrstoch<-function(){
vr <- list( s0=betaval(mean_vrs[1],var_vrs[1]),
s1=betaval(mean_vrs[2],var_vrs[2]),
s3=0,
f1=sample(rec_sim)[1])
return(vr)
}
post
pre
recruit
vrstoch<-function(){
vr <- list( s0=betaval(mean_vrs[1],var_vrs[1]),
s1=betaval(mean_vrs[2],var_vrs[2]),
s2=0,
recruit=sample(rec_sim)[1])
return(vr)
}
stages<-c("seed","Juvenile","Adult")
eval(pre, vrstoch())
vrstoch<-function(){
vr <- list( s0=betaval(mean_vrs[1],var_vrs[1]),
s1=betaval(mean_vrs[2],var_vrs[2]),
s2=0,
recruit=sample(rec_sim)[1])
return(vr)
}
eval(lifecycle_para, vrstoch())
lifecycle_para
lifecycle_para <- expression(matrix2(c(
s0,  recruit,
s1, s2  ),   stages[-1] ))
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
vrstoch<-function(){
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
eval(lifecycle_para, vrstoch())
StochA<-replicate(1000,(eval(lifecycle_para, vrstoch())))
StochA
lapply(StochA,lambda)
lapply(StochA,lambda)%>%hist()
lapply(StochA,lambda)%>%unlist%>%hist()
lapply(StochA,lambda)%>%unlist%>%hist(,xlim=c(0,1))
lapply(StochA,lambda)%>%unlist%>%hist(,xlim=c(0,1.5))
Mean_indiv
BestModel_coef<-(BestModel%>%summary%>%coef)$cond%>%exp()
BestModel_coef
rnorm(1000,
mean = BestModel_coef[1,1],  #Recrutamento estimado pelo melhor model
sd = BestModel_coef[1,2]     #Standard error
)
BestModel_coef
mean(mpm_list)^2
simulate_mpm<-mean(mpm_list)^2
simulate_mpm[2,2]
simulate_mpm[2,2]<-0
simulate_mpm
BestModel_coef
BestModel_coef[1,1]
simulate_mpm[1,2]<-BestModel_coef[1,1]
simulate_mpm
simulate_mpm
simulate_mpm[2,2]
simulate_mpm[1,2]
logN <- log(grizzly$N[-1]/grizzly$N[-39])
grizzly
countCDFxt(mu=mean(logN), sig2=var(logN), nt=38, tq=38, Nc=99, Ne=20)
logN
Mean_indiv
Census_all_max
Timelags_base
Timelags_base
Timelags_base%>%
filter(VAR=="MaxRep>MaxTot")
RepIm
RepIm%>%
mutate(ratio=t1/t0)
RepIm%>%
mutate(ratio=t1/t0)%>%
log(ratio)%>%select(ratio)
RepIm$t1/RepIm$t1t0
RepIm$t1/RepIm$t0
log(RepIm$t1/RepIm$t0)
logN<-log(RepIm$t1/RepIm$t0)
countCDFxt(mu=mean(logN), sig2=var(logN), nt=38, tq=38, Nc=99, Ne=20)
countCDFxt(mu=mean(logN), sig2=var(logN), nt=2, tq=38, Nc=99, Ne=10)
mean(RepIm$t1)
Mean_indiv
countCDFxt(mu=mean(logN), sig2=var(logN), nt=2, Nc=80.6, Ne=10)
countCDFxt(mu=mean(logN), sig2=var(logN), nt=3, Nc=80.6, Ne=10)
countCDFxt(mu=mean(logN), sig2=var(logN), nt=3, Nc=80.6, Ne=10,tmax = 10)
simulate_mpm[2,2]<-0
simulate_mpm<-mean(mpm_list)^2
Mean_indiv
BestModel_coef<-(BestModel%>%summary%>%coef)$cond%>%exp()
BestModel_coef
BestModel_coef[1,1]
BestModel_coef[1,2]
mean(mpm_list)^2
Mean_mpm<-mean(mpm_list)^2
Mean_mpm[1,2]
Mean_mpm[1,2]<-BestModel_coef[1,1]
Mean_mpm
Mean_mpm[2,2]<-0
Mean_mpm
debugSource("C:/Artigos e resumos publicados submetidos ideias/Notes/9 - ITV/Dados-scripts-ITV/Parapiqueria - Dados e scripts/Script viabilidade populacional - Relatório Out2024.R")
Q
Q
Mean_indiv
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 20)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
lambda(Mean_mpm)
Mean_mpm
Mean_mpm
rec_sim<-0.1+    #A small factor has been added to make sure individuals will not recruit zero indivíduals
rnbinom(1000,
mu =   BestModel_coef[1,1],
size = sigma(BestModel) #Desviation in the model
)
mean(rec_sim)
rec_sim<-0.1+    #A small factor has been added to make sure individuals will not recruit zero indivíduals
rnbinom(1000,
mu =   exp(BestModel_coef[1,1]),
size = sigma(BestModel) #Desviation in the model
)
mean(rec_sim)
Mean_mpm[1,2]<-mean(rec_sim)
lambda(Mean_mpm)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
Mean_mpm
rec_sim<-
# 0.1+    #A small factor has been added to make sure individuals will not recruit zero indivíduals
rnbinom(1000,
mu =   exp(BestModel_coef[1,1]),
size = sigma(BestModel) #Desviation in the model
)
Mean_mpm<-mean(mpm_list)^2
Mean_mpm[1,2]<-mean(rec_sim)
Mean_mpm[2,2]<-0
lambda(Mean_mpm)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
#Simulações para S1
for(i in 1:length(cenariosSobrevivencia)){
vr2<-vr
vr2$s1<-cenariosSobrevivencia[i]
AA <- eval(post, vr2)
resultado2[i]<-lambda(AA)
points(resultado2[i]~cenariosSobrevivencia[i],col=5)
print(resultado2[i])
}
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
pop.projection(Mean_mpm, Mean_indiv$Median[1:2], iterations = 10)
